generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model users {
    id                                 String    @id @default(uuid())
    name                               String
    email                              String    @unique
    confirmed_email                    Boolean   @default(false)
    confirm_email_token                String?
    password                           String
    reset_password_token               String?
    admin                              Boolean   @default(false)
    phone                              String?
    address_zipcode                    String?
    address_street                     String?
    address_street_number              Int?
    address_neighborhood               String?
    address_city                       String?
    address_state                      String?
    address_country                    String?
    shop_cart_itens                    String    @default("")
    stripe_customer_id                 String?   @unique
    stripe_card_id                     String?   @unique
    stripe_card_number                 String?
    stripe_card_brand                  String?
    stripe_card_last4                  Int?
    stripe_card_exp_month              Int?
    stripe_card_exp_year               Int?
    stripe_currently_subscription_id   String?   @unique
    stripe_currently_subscription_name String?
    stripe_subscription_start          DateTime?
    stripe_subscription_end            DateTime?
    stripe_cancel_at_period_end        Boolean?
    created_at                         DateTime  @default(now())
    updated_at                         DateTime?

    StripeShopTransaction         shopTransactions[]
    StripeSubscriptionTransaction subscriptionsTransactions[]

    @@unique(fields: [email, confirm_email_token], name: "confirmEmailTokenIsValid")
    @@unique(fields: [email, reset_password_token], name: "resetPasswordTokenIsValid")
    @@unique(fields: [id, admin], name: "isAdmin")
    @@unique(fields: [email, confirmed_email], name: "emailConfirmed")
    @@map("users")
}

model blog {
    id         String    @id @default(uuid())
    title      String    @unique
    resume     String    @unique
    image      String    @unique
    category   String
    body       String    @unique
    slug       String    @unique
    created_at DateTime  @default(now())
    updated_at DateTime?

    @@map("blog")
}

model games {
    id                   String    @id @default(uuid())
    title                String    @unique
    year_release         Int
    price                Int
    resume               String    @unique
    image                String    @unique
    igdb_link            String    @unique
    igdb_rating          Int
    platforms            String
    developer            String
    genres               String
    amazon_link          String?   @unique
    stripe_checkout_link String?   @unique
    created_at_ptbr      String
    created_at           DateTime  @default(now())
    updated_at           DateTime?

    @@map("games")
}

model books {
    id                   String    @id @default(uuid())
    title                String    @unique
    year_release         Int
    price                Int
    image                String    @unique
    resume               String    @unique
    pages                Int
    genres               String
    author               String
    amazon_link          String?   @unique
    stripe_checkout_link String?   @unique
    created_at_ptbr      String
    created_at           DateTime  @default(now())
    updated_at           DateTime?

    @@map("books")
}

model movies {
    id             String    @id @default(uuid())
    title          String    @unique
    year_release   Int
    image          String    @unique
    tmdb_link      String    @unique
    tmdb_rating    Int
    justwatch_link String?   @unique
    resume         String    @unique
    duration       String
    genres         String
    created_at     DateTime  @default(now())
    updated_at     DateTime?

    @@map("movies")
}

model tvShows {
    id             String    @id @default(uuid())
    title          String    @unique
    year_release   Int
    image          String    @unique
    tmdb_link      String    @unique
    tmdb_rating    Int
    justwatch_link String?   @unique
    resume         String    @unique
    duration       String
    genres         String
    created_at     DateTime  @default(now())
    updated_at     DateTime?

    @@map("tv_shows")
}

model shopTransactions {
    id                             String   @id @default(uuid())
    transaction_id                 String   @unique
    total_amount                   Int
    card_id                        String
    card_brand                     String
    card_exp_month                 Int
    card_exp_year                  Int
    card_last4                     Int
    currency                       String
    paid                           Boolean
    products_amount                Int
    products                       String
    stripe_customer_id             String
    user_id                        String
    user                           users    @relation(fields: [user_id], references: [id])
    user_email                     String
    user_phone                     String
    user_name                      String
    shipping_address_zipcode       String
    shipping_address_street        String
    shipping_address_street_number Int
    shipping_address_neighborhood  String
    shipping_address_city          String
    shipping_address_state         String
    shipping_address_country       String
    shipping_carrier               String
    shipping_fee                   Int
    created_at_ptbr                String
    created_at                     DateTime @default(now())

    @@map("shopTransactions")
}

model subscriptionsTransactions {
    id                   String   @id @default(uuid())
    created_at_ptbr      String
    created_at           DateTime @default(now())
    transaction_id       String
    status               String
    user_id              String
    user                 users    @relation(fields: [user_id], references: [id])
    user_email           String
    user_name            String
    stripe_customer_id   String
    card_id              String
    card_brand           String
    card_exp_month       Int
    card_exp_year        Int
    card_last4           Int
    plan_id              String
    plan_name            String
    plan_amount          Int
    current_period_start DateTime
    current_period_end   DateTime
    cancel_at_period_end Boolean

    @@map("subscriptions_transactions")
}
